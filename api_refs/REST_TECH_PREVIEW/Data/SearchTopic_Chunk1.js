define({"70":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/favorites.html",a:"Description The collection of user settings defined for the logged-on user. URL /qcbin/rest/domains/{domain}/projects/{project}/favorites HTTP Methods GET: Retrieves the collection of favorites. PUT: N/A DELETE: N/A POST: Creates a favorite. Media Type GET\n                 PUT\n                 ...",t:"favorites Collection"},"71":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/favorites_by_ID.html",a:"Description The user setting with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}     /favorites/{Favorite ID} Remarks None HTTP Methods GET: Retrieves the favorite definition PUT: Updates the favorite definition. DELETE: Deletes the favorite. POST: N/A Media Type GET\n          ...",t:"favorites/{ID}"},"72":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/favorite-folders.html",a:"Description The collection of folders for public and private user settings. URL /qcbin/rest/domains/{domain}/projects/{project}/favorite-folders Remarks A folder in one module can be identical to a folder in another module in every attribute except the module-id and the id. For each module, there is ...",t:"favorite-folders Collection"},"73":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/favorite-folders_by_ID.html",a:"Description The favorite folder with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}     /favorite-folders/{ID} HTTP Methods GET: Retrieves the favorite folder. PUT: Updates the favorite folder attributes. DELETE: Deletes the favorite folder and all contained folders and ...",t:"favorite-folders/{ID}"},"74":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/releases.html",a:"Description The collection of releases in the project. URL /qcbin/rest/domains/{domain}/projects/{project}/releases Remarks To create a new release, POST an XML compliant with the  Entity Schema  that contains definitions for all the required fields. HTTP Methods GET: Returns the collection of ...",t:"releases Collection"},"75":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/releases_by_ID.html",a:"Description The release with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}     /releases/{ID} HTTP Methods GET: Returns the release. PUT: Updates the release. DELETE: Deletes the release. POST: N/A. Media Type GET\n                 PUT\n                 DELETE\n                 ...",t:"releases/ID"},"76":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/release-cycles.html",a:"Description The collection of release cycles in the project. URL /qcbin/rest/domains/{domain}/projects/{project}/release-cycles Remarks To create a new release cycle, POST an XML compliant with the  Entity Schema  that contains definitions for all the required fields. HTTP Methods GET: Returns the ...",t:"release-cycles Collection"},"77":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/release-cycles_by_ID.html",a:"Description The release cycle with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}     /release-cycles/{ID} HTTP Methods GET: Returns the release cycle. PUT: Updates the release cycle. DELETE: Deletes the release cycle. POST: N/A. Media Type GET\n                 PUT\n            ...",t:"release-cycles/ID"},"78":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/release-folders.html",a:"Description The collection of release folders in the project. URL /qcbin/rest/domains/{domain}/projects/{project}/release-folders HTTP Methods GET: Retrieves the list of release folders. PUT: N/A DELETE: N/A POST: Creates a new release folder. Media Type GET\n                 PUT\n                 ...",t:"release-folders Collection"},"79":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/release-folders_by_ID.html",a:"Description The release folder with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}/release-folders/{release folder ID} HTTP Methods GET: Retrieves the release folder. PUT: Updates the release folder. DELETE: Deletes the release folder. POST: N/A Media Type GET\n                 ...",t:"release-folders/{ID}"},"80":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/assets-relations.html",a:"Description The asset relations of the specified  Test  or  Resource . URL /qcbin/rest/domains/{domain}/projects/{project}/{entity collection}/{entity ID}/assets-relations\n                 /qcbin/rest/domains/{domain}/projects/{project}/{entity collection}/{entity ID}/versions/{version ...",t:"assets-relations Collection"},"81":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/assets-relations_byID.html",a:"Description The asset relation having the specified ID that belongs to the   test  or  resource . URL /qcbin/rest/domains/{domain}/projects/{project}/     {entity collection}/{entity ID}/assets-relations/{Relation ID} Where /{entity collection}/ is one of: /tests/ or /resources/. HTTP Methods GET: ...",t:"assets-relations/{ID}"},"82":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/resources.html",a:"Description The collection of resources in the project. URL /qcbin/rest/domains/{domain}/projects/{project}/resources HTTP Methods GET: Returns the collection of Resources. PUT: N/A DELETE: N/A POST: Creates a REST resource that represents a new project resource. Media Type GET\n                 PUT\n ...",t:"resources Collection"},"83":{i:0.00335817916010688,u:"../Content/REST_API_Tech_Preview/REST/resources_byID.html",a:"Description The resource with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}/resources/{Resource ID} HTTP Methods GET: Returns the Resource. PUT: Updates the Resource. DELETE: Deletes the Resource. POST: N/A Media Type GET\n                 PUT\n                 DELETE\n          ...",t:"resources/{ID}"},"84":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/resource-folders.html",a:"Description The collection of resource folders in the project. URL /qcbin/rest/domains/{domain}/projects/{project}/resource-folders HTTP Methods GET: Retrieves the list of resource folders. PUT: N/A DELETE: N/A POST: Creates a new resource folder. Media Type GET\n                 PUT\n                 ...",t:"resource-folders Collection"},"85":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/resource-folders_byID.html",a:"Description The resource folders with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}/resource-folders/{Resource Folder ID} HTTP Methods GET: Retrieves the resource folder. PUT: Updates the resource folder. DELETE: Deletes the resource folder. POST: N/A Media Type GET\n          ...",t:"resource-folders/{ID}"},"86":{i:0.00377126545622998,u:"../Content/REST_API_Tech_Preview/REST/requirements.html",a:"Description The collection of Requirements in the project. URL /qcbin/rest/domains/{domain}/projects/{project}/requirements Remarks For bulk updates, deletions, and creation, see   Bulk Operations . Passing data in PUT or POST requests that contain fields that do not belong to the requirement\u0027s type ...",t:"requirements Collection"},"87":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/requirements_by_ID.html",a:"Description The Requirement with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}/requirements/{Requirement ID} Remarks The data in returned by a GET request contains only fields that belong to the requirement\u0027s type. Passing data in a PUT request that contains fields that do ...",t:"requirements/{ID}"},"88":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/deleted-assets-infos.html",a:"Description The collection of deleted assets calculated from the broken links between the Test and the assets. URL /qcbin/rest/domains/{domain}/projects/{project}/tests/{Test ID}/deleted-assets-infos HTTP Methods GET: Retrieves the list of deleted asset info objects. PUT: N/A DELETE: N/A POST: N/A ...",t:"deleted-assets-infos Collection"},"89":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/design-steps_Collection.html",a:"Description The collection of design test steps in the project. URL /qcbin/rest/domains/{domain}/projects/{project}/design-steps HTTP Methods GET: Returns the collection of design-steps. PUT: N/A DELETE: N/A POST: Not supported for this collection. Media Type GET\n                 PUT\n                ...",t:"design-steps Collection"},"90":{i:0.00377126545622998,u:"../Content/REST_API_Tech_Preview/REST/tests.html",a:"Description The collection of Tests in the project. URL /qcbin/rest/domains/{domain}/projects/{project}/tests Remarks For bulk updates, deletions, and creation, see   Bulk Operations . HTTP Methods GET: Returns the collection of Tests. PUT: Bulk update with type=collection. DELETE: Bulk deletion ...",t:"tests Collection"},"91":{i:0.00335817916010688,u:"../Content/REST_API_Tech_Preview/REST/tests_by_ID.html",a:"Description The Test with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}/tests/{Test ID} HTTP Methods GET: Returns the Test. PUT: Updates the Test. DELETE: Deletes the Test. POST: N/A Media Type GET PUT DELETE POST application/xml - application/json - Returns One of the  HTTP ...",t:"tests/{ID}"},"92":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/test-configs_Collection.html",a:"Description The collection of Test Configurations in the project. URL /qcbin/rest/domains/{domain}/projects/{project}/test-configs HTTP Methods GET: Returns the collection of Test Configurations. PUT: N/A DELETE: N/A POST: Creates a new test configuration. Media Type GET\n                 PUT\n        ...",t:"test-configs Collection"},"93":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/test-configs_by_ID.html",a:"Description The Test Configuration with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}/test-configs/{ID} HTTP Methods GET: Returns the configuration. PUT: Updates the configuration. DELETE: Deletes the configuration. POST: N/A. Media Type GET\n                 PUT\n              ...",t:"test-configs/ID"},"94":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/test-config-coverages_Collection.html",a:"Description The collection of Test Configurations in the project. URL /qcbin/rest/domains/{domain}/projects/{project}/test-config-coverages HTTP Methods GET: Returns the collection of Test Configurations. PUT: N/A DELETE: N/A POST: Creates a new test configuration. Media Type GET\n                 ...",t:"test-config-coverages Collection"},"95":{i:0.00724916384104889,u:"../Content/REST_API_Tech_Preview/REST/test_folders.html",a:"Description The collection of test folders in the project. URL /qcbin/rest/domains/{domain}/projects/{project}/test-folders HTTP Methods GET: Retrieves the list of test folders. PUT: N/A DELETE: N/A POST: Creates a new test folder. Media Type GET\n                 PUT\n                 DELETE\n         ...",t:"test folders Collection"},"96":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/test-folders_byID.html",a:"Description The Test Folder with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}/test-folders/{Test Folder ID} HTTP Methods GET: Retrieves the test folder. PUT: Updates the test folder. DELETE: Deletes the test folder. POST: N/A Media Type GET\n                 PUT\n              ...",t:"test-folders/{ID}"},"97":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/runs.html",a:"Description The collection of Runs in the project. URL /qcbin/rest/domains/{domain}/projects/{project}/runs HTTP Methods GET: Retrieves the list of Runs. PUT: N/A DELETE: N/A POST: Creates a new Run. Media Type GET\n                 PUT\n                 DELETE\n                 POST\n                 ...",t:"runs Collection"},"98":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/runs_by_ID.html",a:"Description The Run with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}/runs/{Run ID} HTTP Methods GET: Retrieves the Run. PUT: Updates the Run. DELETE: Deletes the Run. POST: N/A Media Type GET\n                 PUT\n                 DELETE\n                 POST\n                ...",t:"runs/{ID}"},"99":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/run-steps.html",a:"Description The collection of run-steps of the specified run. URL /qcbin/rest/domains/{domain}/projects/{project}             /runs/{Run ID}/run-steps Remarks When posting a new run-step, the  Run ID in the parent-id element of the input XML is optional. If the Run ID is not passed, the Run ID in ...",t:"run-steps Collection"},"100":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/run-step_by_ID.html",a:"Description The run-step with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}/runs/{Run ID}/run-steps/{ID} HTTP Methods GET: Retrieves the run step. PUT: Updates the run step. DELETE: Deletes the run step. POST: N/A Media Type GET\n                 PUT\n                 DELETE\n   ...",t:"run-steps/{ID}"},"101":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/test-instances.html",a:"Description The collection of Test Instances in the project. URL /qcbin/rest/domains/{domain}/projects/{project}/test-instances HTTP Methods GET: Retrieves the list of test instances. PUT: N/A DELETE: N/A POST: Creates a new test instance. Media Type GET\n                 PUT\n                 DELETE\n ...",t:"test-instances Collection"},"102":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/test-instances_by_ID.html",a:"Description The Test Instance with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}/test-instances/{Test Instance ID} HTTP Methods GET: Returns the Test Instance. PUT: Updates the Test Instance. DELETE:Deletes the Test Instance. POST: N/A Media Type GET\n                 PUT\n     ...",t:"test-instances/{ID}"},"103":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/test-sets.html",a:"Description The collection of Test Sets in the project. URL /qcbin/rest/domains/{domain}/projects/{project}/test-sets HTTP Methods GET: Retrieves the list of test sets. PUT: N/A DELETE: N/A POST: Creates a new test set. Media Type GET\n                 PUT\n                 DELETE\n                 ...",t:"test-sets Collection"},"104":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/test-sets_by_ID.html",a:"Description The Test Set with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}/test-sets/{Test Set ID} HTTP Methods GET: Retrieves the test set. PUT: Updates the test set. DELETE: Deletes the test set. POST: N/A Media Type GET\n                 PUT\n                 DELETE\n        ...",t:"test-sets/{ID}"},"105":{i:0.00724916384104889,u:"../Content/REST_API_Tech_Preview/REST/test-set-folders.html",a:"Description The collection of test set folders. URL /qcbin/rest/domains/{domain}/projects/{project}/test-set-folders HTTP Methods GET: Retrieves the list of test set folders. PUT: N/A DELETE: N/A POST: Creates a new test set folder. Media Type GET\n                 PUT\n                 DELETE\n        ...",t:"test-set-folders Collection"},"106":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/test-set-folders_by_ID.html",a:"Description The Test Set Folder with the specified ID. URL /qcbin/rest/domains/{domain}/projects/{project}/test-set-folders/{Test Set Folder ID} HTTP Methods GET: Retrieves the test set folder. PUT: Updates the test set folder. DELETE: Deletes the test set folder. POST: N/A Media Type GET\n           ...",t:"test-set-folders/{ID}"},"107":{i:0.00636446916179283,u:"../Content/REST_API_Tech_Preview/REST/attachments_collection.html",a:"Description The collection of attachments of the specified entity. URL /qcbin/rest/domains/{domain}/projects/{project}/{entity collection}/{Entity ID}/attachments Remarks When posting a new file with the content-type: multipart/form-data header, the body of the request can have these parts: Request ...",t:"attachments Collection: Files of an Entity"},"108":{i:0.00310428157466133,u:"../Content/REST_API_Tech_Preview/REST/attachments_byID.html",a:"Description An attachment of the specified entity. Limitations On a PUT operation, the ref-subtype cannot be changed from the value passed when the file was uploaded. URL /qcbin/rest/domains/{domain}/projects/{project}/{entity collection}/{Entity ID}/attachments/{Attachment ID}?by-id=true ...",t:"attachments/{attachment}"},"109":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/copy.html",a:"Description Copies one or more entity instances under the specified target entity. URL /qcbin/rest/domains/{domain}/projects/{project}/{entity collection}/copy Remarks The copy resource can be called on any entity type for which SupportsCopying is true in the entity\u0027s  entity-resource-descriptor . ...",t:"copy"},"110":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/domains.html",a:"Description The domains in a site. URL /qcbin/rest/domains Remarks If the query ?include-projects-info=y is appended to the URL, the list of projects in each domain is returned.  HTTP Methods GET: Gets the domains collection. PUT: N/A DELETE: N/A POST: N/A Media Type GET\n                     PUT\n    ...",t:"domains Collection"},"111":{i:0.00854803699142911,u:"../Content/REST_API_Tech_Preview/REST/groups.html",a:"Description Returns the grouping headers for the specified group-by fields. URL /qcbin/rest/domains/{domain}/projects/{project}/{entity name}/groups/{field}[[,{field}],{field}] Applies To groups applies to the  defects collection , the  requirements collection , and the  tests collection . Remarks ...",t:"groups: Grouping headers"},"112":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/mail.html",a:"Description Emails the entity with the additional information posted. URL /qcbin/rest/domains/{domain}/projects/{project}/{entity collection}/{ID}/mail Remarks Post the mail data in an XML compliant with the  mail  Schema. For example: \n\u003cmail\u003e\n    \u003cto-recipients\u003ealex_qa, ...",t:"mail"},"113":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/projects.html",a:"Description The projects in a domain. URL /qcbin/rest/domains/{domain}/projects  HTTP Methods GET: Gets the collection of projects in the specified domain. PUT: N/A DELETE: N/A POST: N/A Media Type GET\n                     PUT\n                     DELETE\n                     POST\n                    ...",t:"projects Collection"},"114":{i:0.0034812447203398,u:"../Content/REST_API_Tech_Preview/REST/resource-list.html",a:"Description A document detailing all available resources and the actions they expose. URL /qcbin/rest/resource-list Remarks The returned value contains the URLs, supported HTML methods, and mime types. The values possible for Content-Type are in Consumes elements. The values possible for Accept are ...",t:"resource-list"},"115":{i:0.00256021532013517,u:"../Content/REST_API_Tech_Preview/REST/time.html",a:"Description Returns the central database server time. URL /qcbin/rest/server/time Remarks time returns both the server time in milliseconds (since 1970) and the time as a string formatted according to the server default. HTTP Methods GET: Returns the time. PUT: N/A DELETE: N/A POST: N/A Media Type ...",t:"time"},"116":{i:0.0167894554685204,u:"../Content/REST_API_Tech_Preview/REST/VersionCntrlAndLockingRrs.html",a:"Versioning applies to various entities, including requirements, tests, resources, favorites, and favorite-folders. An exception is thrown on use of  check-in ,  check-out ,  undo-check-out , or  versions  on entities that do not support versioning. A  lock  prevents another user from editing the ...",t:"Version Control and Locking Resources"},"117":{i:0.0113592265841887,u:"../Content/REST_API_Tech_Preview/REST/check-in.html",a:"Description Checks in a new version of the entity. URL /qcbin/rest/domains/{domain}/projects/{project}/{entity collection}/{Entity ID}/versions/check-in Remarks To add a comment, Post an XML string compliant with the  check-in-parameters Schema . Both the comment and OverrideLastVersion ...",t:"check-in"},"118":{i:0.0122817748544302,u:"../Content/REST_API_Tech_Preview/REST/check-out.html",a:"Description Checks out an entity. URL /qcbin/rest/domains/{domain}/projects/{project}/{entity collection}/{Entity ID}/versions/check-out Remarks POST the comment and version number with an XML compliant with the  check-out-parameters Schema .  The version is optional. If not specified, the latest ...",t:"check-out"},"119":{i:0.0117718750280408,u:"../Content/REST_API_Tech_Preview/REST/lock.html",a:"Description The lock prevents another user from changing an entity. URL /qcbin/rest/domains/{domain}/projects/{project}/{entity collection}/{Entity ID}/lock Remarks For details of which resources support locking, see  Version Control and Locking Resources See  Update an Entity . HTTP Methods GET: ...",t:"lock"},"120":{i:0.00541465261938135,u:"../Content/REST_API_Tech_Preview/REST/versions.html",a:"Description The collection of versions of a single entity. URL /qcbin/rest/domains/{domain}/projects/{project}/{entity collection}/{Entity ID}/versions HTTP Methods GET: Retrieves a document that represents list of Versions of an entity. PUT: N/A DELETE: N/A POST: N/A Media Type GET\n                 ...",t:"versions"},"121":{i:0.00690612939581133,u:"../Content/REST_API_Tech_Preview/REST/undo-check-out.html",a:"Description Cancels the previous checkout operation for the specified entity. URL /qcbin/rest/domains/{domain}/projects/{project}/{entity collection}/{Entity ID}/versions/undo-check-out Remarks For details of which resources support versioning, see  Version Control and Locking Resources HTTP Methods ...",t:"undo-check-out"},"122":{i:0.00256021532013517,u:"../Content/Resources/MasterPages/_rsc_aboutSearch.htm",a:"To improve your search results, avoid including special characters such as %, #, or + in your search string. Here  are some examples of the syntax you can use for searching: Type To find \"find me\" (in quotes) Topics that include the exact phrase, \"find me\". find me  find+me \n Topics that include ...",t:"Help Center Tips"},"123":{i:0.00270529965467548,u:"../Content/REST_API_Tech_Preview/CodeSamples/AuthenticateLoginLogoutExample.htm",a:"\n\npackage org.hp.qc.web.restapi.docexamples.docexamples;\n\nimport org.hp.qc.web.restapi.docexamples.docexamples.infrastructure.*;\n\nimport java.net.HttpURLConnection;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * This example shows how to login/logout/authenticate to the server with REST.\n * ...",t:"AuthenticateLoginLogout Example"},"124":{i:0.00642780793154388,u:"../Content/REST_API_Tech_Preview/General/Actions_on_Collections.html",a:"Actions on Collections Query a Collection of Entities Create an Entity",t:"Actions on Collections"},"125":{i:0.00891287482618429,u:"../Content/REST_API_Tech_Preview/General/BulkErrorReturn.html",a:"\n\u003cxml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"\u003e\n\u003cQCRestException\u003e\n    \u003cId\u003eqccore.bulk-operation-failed\u003c/Id\u003e\n    \u003cTitle\u003ebulk failed. see exception properties.\u003c/Title\u003e\n    \u003cExceptionProperties\u003e\n        \u003cExceptionProperty name=\"qccore.bulk-operation-failed\"\u003e\n            \u003cvalue\u003e\n                ...",t:"Error Returned from Bulk Operation"},"126":{i:0.00319025467453914,u:"../Content/REST_API_Tech_Preview/General/exceptionHTMLexample.htm",a:"\n \u003c!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"\u003e\n \u003chtml\u003e\n     \u003chead\u003e\n         \u003ctitle\u003eNot Acceptable\u003c/title\u003e\n         \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"/qcbin/rest-exception/rest-exception.css\"/\u003e\n         \u003cscript type=\"text/javascript\" ...",t:"Sample Exception in HTML"},"127":{i:0.00324435875275347,u:"../Content/REST_API_Tech_Preview/REST/alm-authenticate.html",a:"Description Logs the user on to the ALM server. URL /qcbin/authentication-point/alm-authenticate Remarks User and password are sent unencrypted in XML format. To encrypt, use HTTPS protocol. The input format is: \n\t\u003calm-authentication\u003e\n\t    \u003cuser\u003eusername\u003c/user\u003e\n\t    ...",t:"alm-authenticate"},"128":{i:0.00319025467453914,u:"../Content/REST_API_Tech_Preview/REST/Exception_json.htm",a:"\n\n{\n\t\"Id\" : \"qccore.bulk-operation-failed\",\n\t\"Title\" : \"bulk operation failed. see exception properties for more info.\",\n\t\"ExceptionProperties\" : [{\n\t\t\t\"Name\" : \"qccore.bulk-operation-failed\",\n\t\t\t\"BulkValue\" : {\n\t\t\t\t\"BulkEntries\" : [{\n\t\t\t\t\t\t\"Entity\" : {\n\t\t\t\t\t\t\t\"Fields\" : [{\n\t\t\t\t\t\t\t\t\t\"Name\" : ...",t:"Exception in JSON Format"},"129":{i:0.0114728192764198,u:"../Content/REST_API_Tech_Preview/REST/Field_Names.html",a:"  Fields are identified by logical name. To get the list of fields for an entity, use the XML returned by a GET on the  customization fields Collection . This is an example of a Field element: \u003cField PhysicalName=\"TS_ATTACHMENT\" Name=\"attachment\" Label=\"Attachment\"\"\u003e The Name attribute is the ...",t:"Field Names"},"130":{i:0.00539203853659042,u:"../Content/REST_API_Tech_Preview/REST/logout.html",a:"Description Ends the session and cancels the authentication cookie. URL /qcbin/authentication-point/logout Remarks Logging off ends the session by setting the session cookie to expired. When a session ends, all locks are released. Therefore, if an application connects to a new session, discard all ...",t:"logout"},"131":{i:0.00473648033823984,u:"../Content/REST_API_Tech_Preview/REST/XMLSamples/GET_analysis-item-folders_XML.html",a:"\n\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?\u003e\n\u003c!--\nGET: /qcbin/rest/domains/DOMAIN_NAME/projects/PROJECT_NAME/analysis-item-folders\nACCEPT: application/xml\n--\u003e\n\u003cEntities TotalResults=\"21\"\u003e\n    \u003cEntity Type=\"analysis-item-folder\"\u003e\n        \u003cFields\u003e\n            \u003cField Name=\"id\"\u003e\n            ...",t:"GET analysis-item-folders XML"},"132":{i:0.00391274857623489,u:"../Content/REST_API_Tech_Preview/REST/XMLSamples/GET_attachments_XML.html",a:"\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?\u003e\n\u003c!--\nGET: /qcbin/rest/domains/DOMAIN_NAME/projects/PROJECT_NAME/defects/1/attachments\nAccept: application/xml\n--\u003e\n\u003cEntities TotalResults=\"2\"\u003e\n    \u003cEntity Type=\"attachment\"\u003e\n        \u003cFields\u003e\n            \u003cField ...",t:"GET attachments XML"},"133":{i:0.00571206694253759,u:"../Content/REST_API_Tech_Preview/REST/XMLSamples/GET_audits_project_level_XML.html",a:"\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?\u003e\n\u003c!--\nGET: /qcbin/rest/domains/DOMAIN_NAME/projects/PROJECT_NAME/audits?query={parent-type[test];parent-id[101 or 102 or 103]}\u0026order-by={time[asc]} \u0026{user[alex_alm]}\nAccept: application/xml\n--\u003e\n\u003cAudits ...",t:"GET audits project level XML"},"134":{i:0.0036483478291875,u:"../Content/REST_API_Tech_Preview/REST/XMLSamples/GET_CustEntityPermissions_XML.html",a:"\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?\u003e\n\u003c!--\nGET: /qcbin/rest/domains/DOMAIN_NAME/projects/PROJECT_NAME/customization/entities/requirement/permissions\nAccept: ...",t:"GET customization entity permissions XML"},"135":{i:0.00328563699283672,u:"../Content/REST_API_Tech_Preview/REST/XMLSamples/GET_CustEntTypsSbtypFld_XML.html",a:"\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?\u003e\n\u003c!--\nGET: /qcbin/rest/domains/DOMAIN_NAME/projects/PROJECT_NAME/customization/entities/test/types/BUSINESS-PROCESS/fields  \nAccept: application/xml  --\u003e\n\u003cFields\u003e\n    \u003cField PhysicalName=\"TS_HAS_DEPENDENCIES\" Name=\"has-dependencies\" ...",t:"GET customization entity subtype fields XML"},"136":{i:0.0039566658302839,u:"../Content/REST_API_Tech_Preview/REST/XMLSamples/GET_customization_entity_types_XML.html",a:"\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?\u003e\n\u003c!--\nGET: /qcbin/rest/domains/DOMAIN_NAME/projects/PROJECT_NAME/customization/entities/test/types\nAccept: application/xml  --\u003e\n\u003ctypes\u003e\n    \u003ctype name=\"ALT-SCENARIO\" id=\"ALT-SCENARIO\"/\u003e\n    \u003ctype name=\"ALT-TEST\" id=\"ALT-TEST\"/\u003e\n    \u003ctype ...",t:"GET customization entity types XML"},"137":{i:0.0030595550190309,u:"../Content/REST_API_Tech_Preview/REST/XMLSamples/GET_defect-links_XML.html",a:"\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?\u003e\n\u003c!--\nGET: /qcbin/rest/domains/DOMAIN_NAME/projects/PROJECT_NAME/defects/1/defect-links\nAccept: application/xml\n--\u003e\n\u003cdefect-links\u003e\n    \u003cdefect-link\u003e\n        \u003ccomment/\u003e\n        \u003ccreation-time xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ...",t:"GET defect-links XML"},"138":{i:0.00903922186919642,u:"../Content/REST_API_Tech_Preview/REST/XMLSamples/GET_defects_fields_required_XML.html",a:"\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?\u003e\n\u003c!--\nGET: /qcbin/rest/domains/DOMAIN_NAME/projects/PROJECT_NAME/customization/entities/defect/fields?required=true\nAccept: application/xml\n--\u003e\n\u003cFields\u003e\n    \u003cField Label=\"Detected By\" Name=\"BG_DETECTED_BY\" ...",t:"GET required defects fields XML"},});